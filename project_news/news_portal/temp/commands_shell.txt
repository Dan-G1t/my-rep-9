1. Создать пользователей
>>> user_1 = User.objects.create_user('Nikolay92')
>>> user_2 = User.objects.create_user('Maksim_3430') 
>>> user_3 = User.objects.create_user('Roman71')     
>>> user_4 = User.objects.create_user('Makar_Ivanov') 
>>> user_5 = User.objects.create_user('Vasiliy.Muhin')


2. Создать два объекта модели Author, связанные с пользователями.
>>> author_1 = Author.objects.create(user = user_1)
>>> author_2 = Author.objects.create(user = user_3)


3. Добавить 4 категории в модель Category.
>>> category_1 = Category.objects.create(category_name = 'Политика')
>>> category_2 = Category.objects.create(category_name = 'Культура')
>>> category_3 = Category.objects.create(category_name = 'Наука и технологии')
>>> category_4 = Category.objects.create(category_name = 'Спорт')


4. Добавить 2 статьи и 1 новость.
>>> post_1 = Post.objects.create(author = author_1, content_type = 'N', title = 'В Вологде откроют музей дома Романовых', text = 'Музей дома Романовых планируется открыть в Вологде, в частности, он будет посвящен пребыванию в городе находившихся в ссылке четырех великих князей, рассказала РИА Новости председатель наблюдательного совета фонда содействия возрождению традиций милосердия и благотворительности "Елисаветинско-Сергиевское просветительское общество" (ЕСПО) Анна Громова. "Сейчас в федеральном историко-культурном туристическом проекте "Императорский маршрут" 31 регион. Проект в России развивается успешно при содействии региональных властей, музейного и научного сообщества. Например, в Вологде отреставрировали старинное здание в центре города. В нем планируется мемориальный музей, посвященный Императорскому дому Романовых. Мы знаем, что четверо великих князей Павел Александрович, Дмитрий Константинович, Николай Михайлович и Георгий Михайлович находились в Вологде в ссылке, а потом (в 1919 году - ред.) были расстреляны в Петропавловской крепости в Петербурге", - сказала Громова.') 
>>> post_2 = Post.objects.create(author = author_2, content_type = 'A', title = 'Ученые из Волгограда разработали биоактивную добавку для профилактики возрастных заболеваний.', text = 'Сотрудники Волгоградского государственного медицинского университета (ВолгГМУ) создали биологически активную добавку с антигликирующими свойствами. Разработка направлена на профилактику возраст-ассоциированных заболеваний. Уникальность проекта заключается в технологии полного цикла производства и сопровождения продукта — от лабораторных исследований до его появления на аптечных полках. Гликирование — это сложный биохимический процесс, при котором сахара спонтанно присоединяются к молекулам белков без участия ферментов. Этот процесс может происходить в любых клетках и тканях организма, приводя к негативным последствиям для здоровья. В результате гликирования структура и свойства белков изменяются, межклеточное пространство становится жёстким, и клетки утрачивают способность выполнять свои функции. Например, гликирование коллагена, основного белка соединительных тканей, приводит к потере упругости кожи и появлению морщин. С возрастом уровень сахара в крови может повышаться, а способность организма выводить избыток углеводов уменьшается. Это способствует накоплению конечных продуктов гликирования (AGEs) в тканях, что вызывает воспаление и окислительный стресс. Эти процессы могут привести к развитию таких заболеваний, как диабет, сердечно-сосудистые болезни и даже рак. Гликирование также влияет на когнитивные функции и может способствовать развитию нейродегенеративных заболеваний, таких как болезнь Альцгеймера.
Учёные ВолгГМУ на протяжении нескольких лет изучают антигликирующие свойства различных веществ. В ходе исследований они систематизировали данные о 199 соединениях, потенциально подходящих для профилактики возрастных заболеваний. На основе самых перспективных из них были синтезированы новые соединения, способные замедлять образование AGEs в коллагене межклеточного матрикса.
Важным открытием стало то, что растительные экстракты, такие как виноградная косточка и зелёный чай, обладают более выраженными антигликирующими свойствами, чем синтетические молекулы. Это открытие направило учёных на разработку биоактивных добавок на основе природных компонентов.')
>>> post_3 = Post.objects.create(author = author_1, content_type = 'A', title = 'Анализ движений в спорте: использование технологий для улучшения', text = 'В современном мире спорта технологии играют все более важную роль в улучшении техники спортсменов. Анализ движений, с использованием передовых технологий, таких как системы захвата движения и биомеханическое моделирование, стал неотъемлемой частью тренировочного процесса для спортсменов всех уровней. Вполне естественно, что спорт высоких технологий нравится болельщикам, многие из которых заключают пари на соревнования. Системы захвата движения используют датчики или камеры для отслеживания движений тела. Эти системы могут точно захватывать положение, скорость и ускорение каждого сустава и конечности. Данные, собранные с помощью систем захвата движения, могут быть использованы для создания трехмерных моделей движений спортсмена. Биомеханическое моделирование использует компьютерные модели для изучения движений человека. Эти модели учитывают физические характеристики спортсмена, такие как масса, сила и гибкость. Моделирование позволяет исследователям анализировать биомеханические силы, действующие на тело спортсмена, и определять области, где можно улучшить технику.')


5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> post_1_category_1 = PostCategory.objects.create(post = post_1, category = category_2)
>>> post_2_category_1 = PostCategory.objects.create(post = post_2, category = category_3)
>>> post_3_category_1 = PostCategory.objects.create(post = post_3, category = category_3)
>>> post_3_category_2 = PostCategory.objects.create(post = post_3, category = category_4) 
ИЛИ
>>> post_3.category.add(category_3, category_4)


6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> post_1_comment_1 = Comment.objects.create(post = post_1, user = user_2, text = 'Планируем посетить всей семьей.')
>>> post_1_comment_2 = Comment.objects.create(post = post_1, user = user_5, text = 'Был там, классный музей, рекомендую!')
>>> post_2_comment_1 = Comment.objects.create(post = post_2, user = user_4, text = 'Ученым из Волгограда спасибо, молодцы!')
>>> post_3_comment_1 = Comment.objects.create(post = post_3, user = user_2, text = 'Круто!')
>>> post_3_comment_2 = Comment.objects.create(post = post_3, user = user_4, text = 'Киберпанк, который мы заслужили.')


7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> post_1.like()          
>>> post_2.like() 
>>> post_3.like() 
>>> post_3.like()
>>> post_3.like()
>>> post_3.dislike() 
>>> post_3.dislike()
>>> post_3.like() 
>>> post_1_comment_1.like()
>>> post_2_comment_1.like()
>>> post_3_comment_1.dislike() 
>>> post_3_comment_2.like()    


8. Обновить рейтинги пользователей.
>>> author_1.update_rating()
>>> author_2.update_rating()


9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
>>> Author.objects.order_by('-rating').values('user__username', 'rating').first()


10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> Post.objects.order_by('-rating').values('creation_date', 'author__user__username', 'rating', 'title').first()
>>> top_post = Post.objects.order_by('-rating').first()
>>> top_post.preview()


11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> Comment.objects.filter(post_id = top_post.id).values('date', 'user__username', 'rating', 'text')